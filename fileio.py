"""
Class used to read files genarated by the memory dump (md) command in diag21k.
Each file consists of a header followed by the data:

; Thu Oct 13 13:13:49 2022
; DSP program: none
; diag21k md s c0000 74888 dm0a_a2.txt
0x00010001
0x00010001
0x00010001
0x00010001
0x00010001
0x00010001
...

The only relevant part of the header are the line with the bank identifier (s), the starting address (c0000) and
the number of words in the file.

The bank is a single letter or number indicating which memory segment should be affected by the command:
b = byte, 1 = 16-bit, 2 = 32-bit, s = 32-bit, 3 = 48-bit, p = 48-bit, 4 = 64-bit;
test commands only: i = internal, e = external, a = all.

The functions in this module assume that 32-bit data was written to the file (bank='s').
"""


class MemoryDumpFile:

    def __init__(self, file_name: str):
        """
        Create a memory dump file object.
        """
        self.file_name = file_name
        self.f = None
        self.header = {}
        try:
            self.f = open(file_name, 'r')
            self.header = self._read_header()
            self.file_name = file_name
        except FileNotFoundError:
            raise FileNotFoundError(f'File {self.file_name} does not exist')

    def close_file(self):
        """
        Close file and initialize object attributes. Ignore errors.
        """
        try:
            self.f.close()
            self.file_name = ''
            self.f = None
            self.header = {}
        except Exception as e:
            pass

    def _read_header(self):
        """
        Each dump file generated by the md command starts with the following header:

            ; Thu Oct 13 13:13:49 2022
            ; DSP program: none
            ; diag21k md s c0000 74888 dm0a_a2.txt

        This function extracts the bank name (s), the starting address (c0000) and the number of words (74888)
        from the third line, and returns them in a dictionary. The starting address is converted to decimal.
        The dictionary is saaved in the object so calling this funtion more than once will make it return
        the stored value.

        :return: dictionary with header information
        """

        # Return default empty header if the file has not been opened
        if self.f is None:
            return self.header

        # Read the header from the file if it's not defined already
        if not self.header:
            try:
                for line in self.f:
                    if line.find('diag21k') > -1:
                        _, _, _, bank, address_hex, number_of_words, file_name = line.split()
                        self.header = {'bank': bank,
                                       'address': int(address_hex, 16),
                                       'words': int(number_of_words)}
                        break
            except IOError:
                raise IOError(f'Could not read header from {self.file_name}')

        # Return header dictionary
        return self.header

    def get_header(self):
        return self.header

    def get_next_word(self):
        """
        Get next word from the file. This function is a generator. A dump file will have one 32-bit
        word per line, although they represent two 16 bit numbers.

            0x00010001
            0x00010001
            0x00010001

        :return: next line, converted to decimal value
        """

        # Return null data if the file has not been opened.
        if self.f is None:
            return None, None

        # Iterate over lines in the file. Return the decimal representation.
        try:
            for line in self.f:
                yield int(line, 16)
        except IOError:
            raise IOError(f'Cannot read file {self.file_name}')

    @staticmethod
    def split_words(word: int) -> tuple:
        """
        Split a 32-bit word into to 16-bit words
        :param word: input word
        """
        msw = word & 0xffff
        lsw = word & 0xffff0000 >> 16
        return msw, lsw


if __name__ == '__main__':
    m = MemoryDumpFile('data/dm0a_a1_20221013112754.txt')
    # m.open_file('data/dm0a_a1_20221013112754.txt')
    header = m.get_header()
    print(header)
    for w in m.get_next_word():
        # print(w)
        print(w, m.split_words(w))
    # print(m.get_next_word())
    # m.close_file()
