#!/usr/bin/env python
"""
Common functions used by the rest of the software.
Constants (path names) are also defined here.
"""
import os
import datetime
import re

# Root directory for source files
SOURCE_ROOT_PATH = '/mnt/rtc-share/RTC/GUI'

# Default directory where the data files are stored
DEFAULT_SOURCE_FOLDER = 'ngs2_int64_delays'


# Directory where the files will be copied to
DESTINATION_DATA_FOLDER = os.path.join('.', 'data')

# The data files generated by the memory dump program have names of the form <root><n>.txt,
# where <root> is any of the files in the list below and <n> is 1 or 2.
FILE_ROOT_NAMES = (
    "dm0a_a",
    "dm0a_b",
    "dm0b_a",
    "dm0b_b",
    "dm4a_a",
    "dm4a_b",
    "dm4b_a",
    "dm4b_b",
    "dm9_a",
    "dm9_b",
)


def get_file_list() -> list:
    """
    Return the list of files names generated by the diag21k memory dump script.
    :return: list of file names
    """
    output_list = []
    for n in [1, 2]:
        for root in FILE_ROOT_NAMES:
            output_list.append(f'{root}{n}.txt')
    return output_list


def get_source_file_list(source_directory=DEFAULT_SOURCE_FOLDER) -> list:
    """
    Get the list of full names generated by the memory dump script.
    :return: list of file names
    """
    return [os.path.join(SOURCE_ROOT_PATH, source_directory, '201', x) for x in get_file_list()]


def get_destination_file_list(source_directory=DEFAULT_SOURCE_FOLDER,
                              destination_directory=DESTINATION_DATA_FOLDER):
    """
    The destination file names is the same as the source file names, except that
    they will be stored in the destination directory, and they will have a timestamp
    based on the creation time of the files generated by the memory dump script
    in the source directory. The time stamp of the first file will be used for all
    files for easier handling later.
    :param: source_directory: directory where the source files are located
    :param: destination_directory: directory where the destination files will be written too
    :return: list of file names
    """
    output_list = []
    ts = None
    for file_name in get_source_file_list(source_directory=source_directory):
        if ts is None:
            ts = datetime.datetime.fromtimestamp(os.path.getctime(file_name)).strftime('%Y%m%d%H%M%S')
        base_name, extension = os.path.splitext(os.path.basename(file_name))
        output_list.append(os.path.join(destination_directory, f'{base_name}_{ts}{extension}'))
    return output_list


def get_process_file_list(pattern: str, directory=DESTINATION_DATA_FOLDER) -> list:
    """
    Return the name of the files that match a given timestamp in the local data directory.
    :param: pattern: pattern used to match file names
    :param: directory: destination directory
    :return: list of files
    """
    return [os.path.join(directory,x) for x in os.listdir(directory) if re.search(pattern, x)]


if __name__ == '__main__':
    print(SOURCE_ROOT_PATH)
    print(DEFAULT_SOURCE_FOLDER)
    print(DESTINATION_DATA_FOLDER)
    print(get_file_list())
    print(get_source_file_list())
    print(get_destination_file_list(source_directory='ngs2_int64'))
    print(get_process_file_list('20220928114409'))
    pass
